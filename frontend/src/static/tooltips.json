{
    "fi" : {
        "tulosta": "***tulosta lauseke***\nKutsua *tulosta* voi käyttää erilaisten arvojen tulostamiseen. *tulosta* tulostaa aina rivinvaihdon, vaikka sille annettaisiin useampi syöte.\n\n*Esimerkki*\n```\ntulosta \"hei\n-> hei\n\ntulosta \"hei\ntulosta \"moi\n-> hei\n-> moi\n\n(tulosta \"hei \"moi)\n-> hei\n-> moi\n```",
        "eteen": "***eteen lauseke***  \n***et lauseke***  \nLiiku eteenpäin *lauseke* yksikköä.\n\n*Esimerkki*\n```\net 100\noi 90\nta 100\nva 90\nolkoon \"x 200\neteen :x\n```",
        "et": "***eteen lauseke***  \n***et lauseke***  \nLiiku eteenpäin *lauseke* yksikköä.\n\n*Esimerkki*\n```\net 100\noi 90\nta 100\nva 90\nolkoon \"x 200\neteen :x\n```",
        "taakse": "***taakse lauseke***  \n***ta lauseke***  \nLiiku taaksepäin *lauseke* yksikköä.\n\n*Esimerkki*\n```\net 100\noi 90\nta 100\nva 90\nolkoon \"x 200\neteen :x\n```",
        "ta": "***taakse lauseke***  \n***ta lauseke***  \nLiiku taaksepäin *lauseke* yksikköä.\n\n*Esimerkki*\n```\net 100\noi 90\nta 100\nva 90\nolkoon \"x 200\neteen :x\n```",
        "vasemmalle": "***vasemmalle lauseke***  \n***va lauseke***  \nKäänny vasemmalle *lauseke* astetta.\n\n*Esimerkki*\n```\net 100\noi 90\nta 100\nva 90\nolkoon \"x 200\neteen :x\n```",
        "va": "***vasemmalle lauseke***  \n***va lauseke***  \nKäänny vasemmalle *lauseke* astetta.\n\n*Esimerkki*\n```\net 100\noi 90\nta 100\nva 90\nolkoon \"x 200\neteen :x\n```",
        "oikealle": "***oikealle lauseke***  \n***oi lauseke***  \nKäänny oikealle *lauseke* astetta.\n\n*Esimerkki*\n```\net 100\noi 90\nta 100\nva 90\nolkoon \"x 200\neteen :x\n```",
        "oi": "***oikealle lauseke***  \n***oi lauseke***  \nKäänny oikealle *lauseke* astetta.\n\n*Esimerkki*\n```\net 100\noi 90\nta 100\nva 90\nolkoon \"x 200\neteen :x\n```",
        "jos": "***jos lauseke { komennot }***\nSuorita *komennot*, jos *lauseke* on tosi.\n\n*Esimerkki*\n```\njos :x > 999 { tulosta \"suuri }\n```",
        "riippuen": "***riippuen lauseke { komennot1 } { komennot2 }***\nSuorita *komennot1*, jos *lauseke* on tosi. Muuten suorita *komennot2*.\n\n*Esimerkki*\n```\nriippuen :x > 999 { tulosta \"suuri } { tulosta \"pieni }\n```",
        "olkoon": "***olkoon \"nimi lauseke***  \nLuo muuttuja nimeltään *nimi* ja anna sen arvoksi *lauseke*.\n\n*Esimerkki*\n```\nolkoon \"a 42\n```",
        "miten": "***miten aliohjelman.nimi :parametrit ... komennot ... valmis***\n\n*Esimerkki: Aliohjelma **foo** kaksinkertaistaa parametrina saamansa numeerisen arvon **n** ja tulostaa tulon.*\n```\nMITEN foo :n\n    tulosta :n*2\nVALMIS\n```\n\nYllä olevaa aliohjelmaa voi kutsua muuttujalla. Esimerkkinä muuttuja x:\n\n```\nOLKOON \"x 42\nfoo :x\n```",
        "valmis": "***miten aliohjelman.nimi :parametrit ... komennot ... valmis***\n\n*Esimerkki: Aliohjelma **foo** kaksinkertaistaa parametrina saamansa numeerisen arvon **n** ja tulostaa tulon.*\n```\nMITEN foo :n\n    tulosta :n*2\nVALMIS\n```\n\nYllä olevaa aliohjelmaa voi kutsua muuttujalla. Esimerkkinä muuttuja x:\n\n```\nOLKOON \"x 42\nfoo :x\n```",
        "anna": "***anna***\nKäytä aliohjelman *komentojen* sisällä antaaksesi aliohjelmalle paluuarvon.\n\n*Esimerkki: Aliohjelma **neliö** antaa parametrinsä **x** neliön.*\n```\nMITEN neliö :x\n    anna :x * :x\nVALMIS\n```\n\nPaluuarvoa voi käyttää niin kuin mitä tahansa muuta arvoa.\n```\nolkoon \"x neliö 2\nolkoon \"y (neliö 2) + 5\njos 10 < neliö 5 {}\n```",
        "toista": "***toista lauseke { komennot }***  \nSuorita *komennot* *lauseke* kertaa.\n\n*Esimerkki*\n```\ntoista 10 { et 20 }\n```",
        "luvuille": "***luvuille [ \"muuttuja lauseke lauseke lauseke ] { komennot }***  \nKäy luvut alusta loppuun. Argumentit hakasulkeiden sisällä ovat järjestyksessä *muuttuja*, *alku*, *loppu* and *askel*.\n\n*Muuttuja* luodaan uutena paikallisena muuttujana ja siihen voidaan viitata silmukan sisältä samalla tavalla kuin muihin muuttujiin.\n\n*Alku* on arvo, josta *muuttuja* aloittaa.\n\n*Loppu* on arvo, johon *muuttuja* päätyy.\n\n*Askel* on arvo, joka lisätään *muuttujaan* jokaisen *komentojen* suorituskerran jälkeen.\n\n*Esimerkki: Laske 10:een*\n```\nluvuille [\"a 1 10 1] { tulosta :a }\n```\n\n*Esimerkki: Tulosta 2:n kertotaulu*\n```\nluvuille [\"a 2 20 2] { tulosta :a }\n```"
    },
    "en" : {
        "show" : "***show expr***  \n*show* can be used to print out various values. *show* will always print with a line break, even when given multiple inputs.  \n  \n*Example*  \n```\nshow \"hello\n-> hello\n\nshow \"hello\nshow \"hi\n-> hello\n-> hi\n\n(show \"hello \"hi)\n-> hello\n-> hi\n```",
        "forward" : "***forward expr***  \n***fd expr***  \nMove forward *expr* units.  \n*Example*  \n```\nfd 100\nrt 90\nbk 100\nlt 90\nmake \"x 200\nforward :x\n```",
        "fd" : "***forward expr***  \n***fd expr***  \nMove forward *expr* units.  \n*Example*  \n```\nfd 100\nrt 90\nbk 100\nlt 90\nmake \"x 200\nforward :x\n```",
        "backward" : "***backward expr***  \n***bk expr***  \nMove backward *expr* units.  \n*Example*  \n```\nfd 100\nrt 90\nbk 100\nlt 90\nmake \"x 200\nforward :x\n```",
        "bk" : "***backward expr***  \n***bk expr***  \nMove backward *expr* units.  \n*Example*  \n```\nfd 100\nrt 90\nbk 100\nlt 90\nmake \"x 200\nforward :x\n```",
        "left" : "***left expr***  \n***lt expr***  \nTurn left *expr* degrees.  \n*Example*  \n```\nfd 100\nrt 90\nbk 100\nlt 90\nmake \"x 200\nforward :x\n```",
        "lt" : "***left expr***  \n***lt expr***  \nTurn left *expr* degrees.  \n*Example*  \n```\nfd 100\nrt 90\nbk 100\nlt 90\nmake \"x 200\nforward :x\n```",
        "right" : "***right expr***  \n***rt expr***  \nTurn right *expr* degrees.  \n*Example*  \n```\nfd 100\nrt 90\nbk 100\nlt 90\nmake \"x 200\nforward :x\n```",
        "rt" : "***right expr***  \n***rt expr***  \nTurn right *expr* degrees.  \n*Example*  \n```\nfd 100\nrt 90\nbk 100\nlt 90\nmake \"x 200\nforward :x\n```",
        "if" : "***if expr { statements }***  \nRun *statements* if *expr* is true.  \n  \n*Example*  \n```if :x > 999 { show \"large }```",
        "ifelse" : "***ifelse expr { statements1 } { statements2 }***  \nRun *statements1* if *expr* is true. Otherwise run *statements2*.  \n  \n*Example*  \n```ifelse :x > 999 { show \"large } { show \"small }```",
        "make" : "***make \"varname expr***  \nCreate a variable named *varname* and assign *expr* as its value.  \n  \n*Example*  \n```make \"a 42```",
        "to" : "***to procname :params ... statements ... end***  \n  \n*Example: Procedure **foo** doubles the numeric value it has received as its parameter **n** and prints the result.*  \n```\nTO foo :n\n    show :n*2\nEND",
        "end" : "***to procname :params ... statements ... end***  \n  \n*Example: Procedure **foo** doubles the numeric value it has received as its parameter **n** and prints the result.*  \n```\nTO foo :n\n    show :n*2\nEND",
        "repeat" : "***repeat expr { statements }***  \nRun *statements* *expr* times.  \n  \n*Example*  \n```repeat 10 { fd 20 }```",
        "for" : "***for [ \"variable expr expr expr ] { statements }***  \nTypical **for** loop. The arguments inside the square brackets are, in order, *iterable*, *start*, *limit* and *step*.  \n  \n*Iterable* is created as a new local variable and can be referred to within the for loop in the same way as other variables.  \n  \n*Start* is the value the *iterable* starts at.  \n  \n*Limit* is the value the *iterable* ends at. Inclusive.  \n  \n*Step* is the value added to *iterable* after each loop of *statements*.  \n  \n*Example: Count to 10*  \n```for [\"a 1 10 1] { show :a }```  \n  \n*Example: Print out the multiplication table of 2*  \n```for [\"a 2 20 2] { show :a }```",
        "output": "***output***\nUse inside a procedure declaration's *statements* to have the procedure put out a value.  \n  \n*Example: Procedure **square** puts out its parameter **x** squared.*\n```\nTO square :x\n    output :x * :x\nEND\n```\nThis value can be used in the same way as any other value.\n```\nmake \"x square 2\nmake \"y (square 2) + 5\nif 10 < square 5 {}\n```"
    }
}